schema: "1"
id: production-template
protect: false
configuration:
  concurrentExecutions:
    limitConcurrent: true
    parallel: false
  notifications:
  - address: yourslackchannelname
    level: pipeline
    message:
      pipeline.failed:
        text: "Pipeline Failure...@channel"
    name: slack0
    type: slack
    when:
    - pipeline.starting
    - pipeline.complete
    - pipeline.failed
variables:
- name: application
  description: The name of the application to scope this pipeline to
- name: loadbalancer
  description: The name of the load balancer for clusters created by this pipeline
- name: clustername
  description: The name of cluster that contains the k8s pods generated by this pipeline
- name: stagingclustername
  description: The name of the staging cluster to pull the image we want to deploy to production
- name: imagenamepattern
  description: A string used to pattern match the name of the image we want to pull from the staging cluster
- name: smoketestjob
  description: Location of the job to execute for running Smoke Tests
- name: stagingloadbalancer
  description: The name of the load balancer for clusters created by this pipeline
- name: stagingclustername
  description: The name of cluster that contains the k8s pods generated by this pipeline
- name: gcrimage
  description: The GCR image of the container to run
- name: gcrrepo
  description: The GCR repository to connect to
stages:
- config:
    clusters:
    - account: youraccountname
      application: "{{ application }}"
      cloudProvider: kubernetes
      containers:
      - args: []
        command: []
        envVars:
        # Simple Environment value
        - name: ASPNETCORE_ENVIRONMENT
          value: Staging
        # Environment values pulled from Kubernetes Secrets
        - envSource:
            secretSource:
              key: url
              secretName: couchbase-primary
          name: Couchbase__Servers__0
        - envSource:
            secretSource:
              key: username
              secretName: couchbase-primary
          name: Couchbase__Username
        - envSource:
            secretSource:
              key: password
              secretName: couchbase-primary
          name: Couchbase__Password
        imageDescription:
          account: your-gcr-account-name
          fromTrigger: true
          imageId: "{{ gcrimage }}"
          registry: us.gcr.io
          repository: "{{ gcrrepo }}"
        imagePullPolicy: IFNOTPRESENT
        limits: {}
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: "your-{{ application }}"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health?type=ready
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        requests:
          cpu: ""
          memory: ""
        volumeMounts: []
      - args: []
        command: []
        envVars:
        - envSource:
            secretSource:
              key: key
              secretName: api-gateway
          name: API_GATEWAY_KEY
        imageDescription:
          account: your-gcr-account-name
          imageId: your-gcr-image-to-pull
          registry: us.gcr.io
          repository: your-gcr-repository-name
          # we prefer specific numbers rather than using 'latest'
          tag: "1"
        imagePullPolicy: IFNOTPRESENT
        limits: {}
        name: the-arbitrary-image-name-and-displayed-in-spinnaker-ui
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        requests: {}
        volumeMounts: []
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      freeFormDetails: api
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ stagingloadbalancer }}"
      namespace: default
      nodeSelector: {}
      podAnnotations: {}
      provider: kubernetes
      region: default
      replicaSetAnnotations: {}
      stack: staging
      strategy: ""
      targetSize: 1
      terminationGracePeriodSeconds: 30
      volumeSources: []
    overrideTimeout: true
    stageTimeoutMs: 600000
  id: deploy
  inheritanceControl: {}
  inject: {}
  name: Deploy
  type: deploy
- config:
    waitTime: 30
  dependsOn:
  - deploy
  id: healthchecks-wait
  inheritanceControl: {}
  inject: {}
  name: Wait for ALB Health Checks
  type: wait
- config:
    completeOtherBranchesThenFail: false
    continuePipeline: true
    failPipeline: false
    job: "{{ smoketestjob }}"
    master: primary-jenkins
    parameters: {}
  dependsOn:
  - healthchecks-wait
  id: smoketests
  inheritanceControl: {}
  inject: {}
  name: Smoke Test
  type: jenkins
- config:
    clusters:
    - account: youraccountname
      application: "{{ application }}"
      capacity:
        desired: 1
        max: 9
        min: 3
      cloudProvider: kubernetes
      containers:
      - args: []
        command: []
        envVars:
        - name: ASPNETCORE_ENVIRONMENT
          value: Production
        - envSource:
            secretSource:
              key: url
              secretName: couchbase-primary
          name: Couchbase__Servers__0
        - envSource:
            secretSource:
              key: username
              secretName: couchbase-primary
          name: Couchbase__Username
        - envSource:
            secretSource:
              key: password
              secretName: couchbase-primary
          name: Couchbase__Password
        imageDescription:
          account: your-gcr-account-name
          fromTrigger: true
          imageId: "{{ gcrimage }}"
          registry: us.gcr.io
          repository: "{{ gcrrepo }}"
        imagePullPolicy: IFNOTPRESENT
        limits: {}
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: "{{ application }}-image"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health?type=ready
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        requests: {}
        volumeMounts: []
      - args: []
        command: []
        envVars: []
        imageDescription:
          account: your-gcr-account-name
          imageId: your-image-name
          registry: us.gcr.io
          repository: your-gcr-repository-name
          # prefer specific tag numbers
          tag: "1"
        imagePullPolicy: IFNOTPRESENT
        limits: {}
        name: your-arbitrary-image-name
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        requests: {}
        volumeMounts: []
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      freeFormDetails: api
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ loadbalancer }}"
      namespace: default
      nodeSelector: {}
      podAnnotations: {}
      provider: kubernetes
      region: default
      replicaSetAnnotations: {}
      scalingPolicy:
        cpuUtilization:
          target: 40
      stack: prod
      strategy: ""
      targetSize: 3
      terminationGracePeriodSeconds: 30
      volumeSources: []
    overrideTimeout: true
    stageTimeoutMs: 600000
    stageEnabled:
      # Conditional
      # Only run this stage IFF the smoketest stage was successful
      expression: "#stage('Smoke Test')['context']['buildInfo']['result']=='SUCCESS'"
      type: expression
  dependsOn:
  - smoketest
  id: production-deployment-stage
  inheritanceControl: {}
  inject: {}
  name: Deploy Production
  type: deploy
- config:
    cloudProvider: kubernetes
    cloudProviderType: kubernetes
    cluster: "{{ clustername }}"
    credentials: secret-credentials-name
    interestingHealthProviderNames:
    - KubernetesService
    namespaces:
    - default
    preferLargerOverNewer: "false"
    remainingEnabledServerGroups: 1
  dependsOn:
  - production-deployment-stage
  id: disable-old-production-stage
  inheritanceControl: {}
  inject: {}
  name: Disable Cluster
  type: disableCluster
- config:
    allowDeleteActive: false
    cloudProvider: kubernetes
    cloudProviderType: kubernetes
    cluster: "{{ clustername }}"
    credentials: secret-credentials-name
    namespaces:
    - default
    retainLargerOverNewer: "false"
    shrinkToSize: 3
  dependsOn:
  - disable-old-production-stage
  id: production-shrinkcluster
  inheritanceControl: {}
  inject: {}
  name: Shrink Cluster
  type: shrinkCluster
- config:
    cloudProvider: kubernetes
    cloudProviderType: kubernetes
    cluster: "{{ stagingclustername }}"
    clusters: []
    credentials: secret-credentials-name
    interestingHealthProviderNames:
    - KubernetesService
    namespaces:
    - default
    target: current_asg_dynamic
  dependsOn:
  - production-deployment-stage
  id: destroy-staging-stage
  inheritanceControl: {}
  inject: {}
  name: Destroy Staging Server Group
  type: destroyServerGroup